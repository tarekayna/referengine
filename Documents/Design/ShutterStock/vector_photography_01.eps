%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 16.0.0
%%For: (elm) ()
%%Title: (Foto_girl.eps)
%%CreationDate: 3/4/2013 10:11 AM
%%Canvassize: 8640
%%BoundingBox: 52 88 543 754
%%HiResBoundingBox: 52.3811 88.4351 542.7358 753.396
%%DocumentProcessColors: Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_screens_AI5 1.0 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%CMYKProcessColor: 1 1 1 1 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 296.5 420.5 296.5 420.5
%AI3_TileBox: -1.15991 0.040039 594.1602 841.96
%AI3_DocumentPreview: Header
%AI5_ArtSize: 595 842
%AI5_RulerUnits: 1
%AI5_ArtFlags: 0 0 0 1 0 0 0 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -516 883 1 1635 909 26 0 0 5 114 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:0 0
%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 0
%AI12_CMSettings: 00.MS
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginResource: procset Adobe_screens_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Custom Halftone Screens ProcSet)
%%Version: 1.2 0
%%CreationDate: (03/24/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
systemdict begin
userdict /Adobe_screens_AI5 15 dict dup begin
put
/initialize
{
	Adobe_screens_AI5 begin
	/screenid
		deviceDPI 600 gt composite? not or
		{
		-1
		}
		{
			deviceDPI currentScreenFreq 
			dup dup 60 ge exch 150 le and deviceDPI 300 le and
		{
			pop 60
		} if
		div 1.41421 div 0.5 add cvi
		} ifelse
	def
	
	2 screenid eq
	{
		/customsize 16 def
		/customdata /customdata2 def
		setcustomscreen
	} if
	
	3 screenid eq
	{
		/customsize 24 def
		/customdata /customdata3 def
		setcustomscreen
	} if
	
	4 screenid eq
	{
		/customsize 16 def
		/customdata /customdata4 def
		setcustomscreen
	} if
	
	5 screenid eq
	{
		/customsize 20 def
		/customdata /customdata5 def
		setcustomscreen
	} if
	
	6 screenid eq
	{
		/customsize 24 def
		/customdata /customdata6 def
		setcustomscreen
	} if
	
	7 screenid eq
	{
		/customsize 28 def
		/customdata /customdata7 def
		setcustomscreen
	} if
	
	8 screenid eq
	{
		/customsize 16 def
		/customdata /customdata8 def
		setcustomscreen
	} if
} def
/terminate
{
	currentdict Adobe_screens_AI5 eq
	{
	 end
	} if
} def
/setcustomscreen
{
	deviceDPI customsize div 0
	{
		1 add 2 div customsize mul cvi exch
		1 add 2 div customsize mul cvi exch
		customsize mul add
		customdata load exch get 256 div
	} setscreen
} def
/customdata2 28 28 mul string def
currentfile customdata2 readhexstring
4180E8694988E2634382EA6B4B8AE061A01939C8A81737C2A21B3BCAAA1636C0
F8795998F6775796FA7B5B9AF57656952ED8B80727D6B60F2FDABA0626D5B50E
4E8DE6674786EE6F4F8EE5664685ED6EAD1434C6A61F3FCEAE1232C5A51E3ECD
F3745493FE7F5F9EF1725291FD7E5E9D24D3B30C2CDEBE0222D1B10A2ADDBD04
4483EB6C4C8BE1624281E96A4A89E364A31C3CCBAB1535C1A11A3AC9A91838C3
FB7C5C9BF4755594F97A5A99F778589730DBBB0525D4B40D2DD9B90828D7B710
508FE4654584EC6D4D8CE7684887EF70AF1131C4A41D3DCCAC1333C7A72040CF
F0715190FC7D5D9CF2735392FF80609F21D0B00929DCBC0323D2B20B2BDFBF01
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata3 28 28 mul string def
currentfile customdata3 readhexstring
011DC7F5E73D0421CBF3E43A021EC8F6E83E0522CCF2E43A2B648BC4A0762F68
8AC39E732C658CC5A177306989C29D72D5B6521A6192D9B55219608FD6B6531B
6193DAB451185F8FFCEE440C28D2FCED430B27D1FDEF450C29D3FBEC420A26D0
BEA77D366F83BCA77C356E87BFA87E377082BBA67B346D86145B99E0AE4A1259
98DFB14E155C9AE1AD4A115897DEB04D0623CDF4E63C0420CAF8EA400723CDF4
E53B031FC9F7E93F316988C19F752E678EC6A378326A88C09F742D668DC6A278
DBB350175E91D8B8551C6395DCB24F165D90D7B7541C6294FAEC420925CFFFF1
470E2BD5F9EB410824CEFEF0460D2AD4BAA57A336C85BEAA80397180B9A47933
6B84BDA97F387181105797DDAF4C145A9CE3AB480F5696DDAE4B13599BE2AC49
021EC8F6E83E0522CCF2E43A011DC7F5E73D0421CBF3E43A2C658CC5A1773069
89C29D722B648BC4A0762F688AC39E73D6B6531B6193DAB451185F8FD5B6521A
6192D9B55219608FFDEF450C29D3FBEC420A26D0FCEE440C28D2FCED430B27D1
BFA87E377082BBA67B346D86BEA77D366F83BCA77C356E87155C9AE1AD4A1158
97DEB04D145B99E0AE4A125998DFB14E0723CDF4E53B031FC9F7E93F0623CDF4
E63C0420CAF8EA40326A88C09F742D668DC6A278316988C19F752E678EC6A378
DCB24F165D90D7B7541C6294DBB350175E91D8B8551C6395F9EB410824CEFEF0
460D2AD4FAEC420925CFFFF1470E2BD5B9A479336B84BDA97F387181BAA57A33
6C85BEAA803971800F5696DDAE4B13599BE2AC49105797DDAF4C145A9CE3AB48
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata4 28 28 mul string def
currentfile customdata4 readhexstring
1139B8E0FAD2531B133BBAE2F8D05119417180A6AE9A7B4B437382A5AD987949
C08867272F6F92CAC28A66262E6E90C8E8DE5F070F37B6F2EADD5E060E36B5F0
FED6571F173FBEE6FDD5561E163EBDE5AB9E7F4F477786A1A99D7E4E467685A3
2C6C96CEC68E62222A6A95CDC58D64240C34B3F6EED95A020A32B1F5EDDB5C04
143CBBE3F9D1521A123AB9E1FBD3541C447483A4AC997A4A427281A7AF9B7C4C
C38B65252D6D91C9C1896828307093CBEBDC5D050D35B4F1E9DF60081038B7F3
FCD4551D153DBCE4FFD758201840BFE7A89C7D4D457584A2AA9F8050487887A0
296994CCC48C63232B6B97CFC78F61210931B0F4ECDA5B030B33B2F7EFD85901
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata5 28 28 mul string def
currentfile customdata5 readhexstring
010B34C3EBFCF7CE3F16020C35C4EDFBF6CD3E15102552A4D6EADDB5632B1126
54A5D5EADCB3622A3958768499C19E8C7C5E3A59778498C19D8B7B5DC8A99370
47334C7587AFC9AA936F46324B7485AEF1E5BC6B1E0A2351A3D8F2E4BC6A1E09
2351A2D7FFF9D14219050F38C6EFFEF9D04118040E37C6EFE8E0B7662D142856
A8D3E7DFB7652D132856A7D4BF9C8E7F603D5B7A8195BE9A8E7E603C5B798297
314A7389B2CCAD906D442F497289B1CBAC926E4508214FA1DBF4E2B9671B0720
4EA0DAF4E3BA691C030D36C5EDFBF6CD3F16010C34C3ECFDF8CF4017122654A6
D4E9DDB4622A112553A5D6EBDEB5642C3B59788397C09C8B7C5D3A58778599C2
9E8C7D5FCAAB926E46314B7486AFC8AA947048334D7587B0F2E4BB691D082250
A1D8F1E6BD6B1F0A2452A3D9FDF8CF4118030E36C5EEFFFAD1421A050F38C7F0
E6DFB6642C132755A7D3E8E1B8662E152957A8D2BE9A8D7E5F3B5A798296BF9B
8F80613D5C7B80952F487188B1CAAC916D443049728AB3CCAE906C43061F4D9F
DAF3E2BA681C07214FA0DBF5E1B8671A00000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata6 28 28 mul string def
currentfile customdata6 readhexstring
081A44B6E0F2FDECC150250C091B45B6E1F3FCEBC04F240C1D336199C7D8DCD3
A56C37221E33619AC8D7DBD2A46B36214864798091AEB1958C7E694C49657A81
90ADB0948B7D684BB99D8475593C405C7888A1BEBA9E8574583B3F5B7888A0BD
E4CBAA712E1215326098CFE8E4CCA9712D1114315F97CEE7F5F1C6552B040719
43B5DFFAF6F0C6542A03061842B4DEF9FFEDC352270E0B1C47B8E3F4FEECC251
260D0A1C46B7E2F4DAD5A76E39232035639CCAD5D9D4A66D38231F34629BC9D6
AF938E806A4E4A677C838FABAE928D7F694D4A667B828FAC3E5A778AA3BFBC9F
8772563A3D597689A2BEBB9F8673573A14305E97D1EAE6CDA76F2B0F132F5D96
D0E9E5CDA8702C10051742B3DDFCF8EEC4522801041641B2DDFBF7EFC5532902
091B45B6E1F3FCEBC04F240C081A44B6E0F2FDECC150250C1E33619AC8D7DBD2
A46B36211D336199C7D8DCD3A56C372249657A8190ADB0948B7D684B48647980
91AEB1958C7E694CBA9E8574583B3F5B7888A0BDB99D8475593C405C7888A1BE
E4CCA9712D1114315F97CEE7E4CBAA712E1215326098CFE8F6F0C6542A030618
42B4DEF9F5F1C6552B04071943B5DFFAFEECC251260D0A1C46B7E2F4FFEDC352
270E0B1C47B8E3F4D9D4A66D38231F34629BC9D6DAD5A76E39232035639CCAD5
AE928D7F694D4A667B828FACAF938E806A4E4A677C838FAB3D597689A2BEBB9F
8673573A3E5A778AA3BFBC9F8772563A132F5D96D0E9E5CDA8702C1014305E97
D1EAE6CDA76F2B0F041641B2DDFBF7EFC5532902051742B3DDFCF8EEC4522801
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
/customdata7 28 28 mul string def
currentfile customdata7 readhexstring
01061B44B7E1F5FEFBE6BD4A210C01071B45B8E1F6FDFBE6BC4A200B09132A54
A7D1EAF5EED9B05D331609142B55A8D2EAF4EED9AF5C32161D2D3D6993C1CBE0
CEC59B7140301E2E3D6A93C0CADFCDC49A713F3047576C7B828DA2B6A48F867E
6F5A48576C7C828CA1B6A38F867E6E59BAAA958A78634E4451667A8498ADBAAB
968977624E4350657A8398ADE3D4C99F7539251A273C6892C2D7E4D4C89E7539
241A273B6891C1D6F8F2DDB460371005122A53A7D0ECF9F2DDB360360F051229
53A6D0EBFFFDE8BE4C220D03081D46B9E3F7FFFCE7BD4B210D02071C46B8E2F7
F3F0DBB15E34180B152C56A9D3E8F3EFDAB05D34170A142C55A9D2E9DFCCC69C
7341321F2F3F6B94BFC9DECCC59C7241311F2E3E6A94BFCAB5A38E8780705B49
596D7D808BA0B4A28D877F6F5B48586D7C818BA043506479859AAFBCAC978876
614C424F64798499AEBBAB968977624D19263B6791C3D8E5D6C79D7337231825
3A6690C3D7E5D5C79E74382304112952A5CFEDFAF0DBB25E350E03102851A5CE
ECF9F1DCB25F360E01071B45B8E1F6FDFBE6BC4A200B01061B44B7E1F5FEFBE6
BD4A210C09142B55A8D2EAF4EED9AF5C321609132A54A7D1EAF5EED9B05D3316
1E2E3D6A93C0CADFCDC49A713F301D2D3D6993C1CBE0CEC59B71403048576C7C
828CA1B6A38F867E6E5947576C7B828DA2B6A48F867E6F5ABAAB968977624E43
50657A8398ADBAAA958A78634E4451667A8498ADE4D4C89E7539241A273B6891
C1D6E3D4C99F7539251A273C6892C2D7F9F2DDB360360F05122953A6D0EBF8F2
DDB460371005122A53A7D0ECFFFCE7BD4B210D02071C46B8E2F7FFFDE8BE4C22
0D03081D46B9E3F7F3EFDAB05D34170A142C55A9D2E9F3F0DBB15E34180B152C
56A9D3E8DECCC59C7241311F2E3E6A94BFCADFCCC69C7341321F2F3F6B94BFC9
B4A28D877F6F5B48586D7C818BA0B5A38E8780705B49596D7D808BA0424F6479
8499AEBBAB968977624D43506479859AAFBCAC978876614C18253A6690C3D7E5
D5C79E74382319263B6791C3D8E5D6C79D73372303102851A5CEECF9F1DCB25F
360E04112952A5CFEDFAF0DBB25E350E
pop pop
/customdata8 28 28 mul string def
currentfile customdata8 readhexstring
050F2747B6D6EEF8FEF4DCBC4D2D1507111D375F9EC6E0E9EBE6CCA4653D1F13
2939556F8EA8C1D1D3C3AE9475573B2B4961717D808999B1B39B8B867F73634B
B8A090827A6A5A42445C6C7C8492A2BAD8C8AA97785232222434546E8DACCADA
F0E2CFA768401A0A0C1C365E9DC5E4F2FAF7DFBF50301802040E2646B5D5EDFC
FFF5DDBD4E2E160806102848B7D7EFF9EAE7CDA5663E2014121E38609FC7E1E8
D2C2AF9576583C2C2A3A56708FA9C0D0B29A8A878074644C4A62727E818898B0
435B6B7B8593A3BBB9A19183796959412333536D8CADCBDBD9C9AB9677513121
0B1B355D9CC4E5F3F1E3CEA6673F1909030D2545B4D4ECFDFBF6DEBE4F2F1701
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000
pop pop
end
end
defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_screens_AI5 /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI8_PluginGroupInfo
(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)
%AI8_PluginGroupInfo
(Adobe Vectorized Object) (Image Tracing) (Illustrator.exe)
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Pattern Editor Plugin Group) (Adobe Pattern Editor Plugin Group) (Swatch Libraries.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI5_End_NonPrinting--
%AI5_Begin_NonPrinting
Np
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
1 1 1 1 ([Registration]) 0 Xs
([Registration])
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 100 Lb
(Layer 1) Ln
0 A
*u
0 O
0 0 0 1 k
0 J 0 j 1 w 10 M []0 d1 XR
449.5679 280.6563 m
450.4321 272.4482 451.2241 264.168 452.1602 255.8159 C
454.5361 233.7842 457.6318 212.3281 461.52 190.4399 C
462.6719 181.584 465.9121 173.6641 470.7358 166.248 C
476.7842 157.104 482.6162 147.8882 488.9521 138.96 C
496.9438 127.6558 515.3042 121.8242 528.6958 120.8882 C
537.3359 120.168 539.4961 110.7358 542.7358 102.6001 C
528.1919 98.3521 505.2241 91.4399 490.6802 89.9282 c
479.3042 88.7759 468.7202 89.2798 460.0078 92.9521 c
453.3838 95.688 446.6162 98.7119 439.1279 102.5278 C
437.1841 101.1602 438.4082 95.832 438.48 92.1602 C
431.7842 92.0879 396.3599 91.728 395.7119 95.1118 C
395.4238 101.0161 392.7598 108.2158 389.8081 112.3198 C
384.9121 122.832 386.2798 134.7842 389.376 145.4399 C
391.104 151.416 389.8081 158.1118 389.5918 165.4561 c
389.3042 174.6001 392.3999 182.4482 389.0879 191.52 c
386.7119 198.0718 383.688 204.4082 381.168 210.8882 C
377.7842 219.6719 374.3281 228.4561 371.1602 237.3838 C
369.3599 242.4961 368.208 247.896 366.5518 253.0801 C
366.3359 253.9438 365.1118 254.9521 364.1758 255.0239 C
356.4722 256.0322 352.2959 261.2881 353.4482 268.6318 c
354.6719 276.6958 347.4722 288.5039 343.2241 294.6958 c
340.7041 298.3682 339.2642 308.4482 347.6162 314.5679 C
345.6719 318.0239 343.8721 321.48 342.144 325.0078 C
335.7358 316.6563 325.4399 307.3682 318.7441 299.3042 C
303.0479 278.5679 293.1841 261.2158 270.5039 243.792 C
287.7842 224.7119 339.3359 175.0322 336.7441 143.208 C
335.5918 128.4482 327.8159 113.832 317.3042 103.104 c
308.4482 94.104 298.728 90.5762 286.416 90.144 c
282.312 90 278.208 89.856 274.1758 89.064 C
266.1841 87.4082 258.6958 89.3521 251.208 91.0801 C
247.6802 91.9438 244.4399 94.3921 241.1279 96.1201 C
236.9521 98.3521 232.6318 99.792 227.8081 99.5762 C
225.2881 99.5039 222.7681 99.6479 220.248 99.6479 C
214.2002 99.6479 208.6558 101.4482 203.3281 104.3999 C
193.6802 109.6558 182.8799 112.3921 173.3042 117.5039 C
168.3359 118.584 165.7441 123.1201 162.7202 127.0078 C
153.5039 133.6318 141.9121 137.5918 131.1841 141.0479 c
119.2319 144.8638 113.9038 136.0078 108.8638 127.3682 C
110.376 126.936 112.0322 126.6479 113.1118 126.6479 C
126.6479 127.0078 131.832 108.0718 116.3521 106.6318 C
90.144 104.1118 47.448 100.9438 52.8479 141.624 C
55.0801 158.1841 68.3279 169.2002 73.1519 184.5361 C
74.376 188.6401 77.4722 194.6162 78.6958 198.6479 C
77.04 204.8398 68.76 203.1841 67.3921 204.624 C
68.616 216.5039 73.0801 227.8799 82.4399 235.2241 C
69.2639 256.9678 61.1279 268.4878 68.1841 300.8882 c
69.696 307.7998 72.864 312.9121 75.4561 319.3921 C
73.0078 320.832 53.928 329.1118 56.8081 334.1519 C
59.1841 338.3281 61.5601 342.5039 63.936 346.6802 C
70.7041 364.0322 78.9839 388.2959 88.3438 407.1602 C
88.5601 407.5918 80.9282 415.4399 79.9922 419.3999 C
82.2241 421.7759 96.0479 441.5039 97.7759 446.1118 C
105.1919 456.5518 117.3599 467.856 123.7681 478.4399 C
135.144 510.6958 141.624 541.0078 160.7041 575.9277 C
162.3599 579.8882 162.0718 581.2559 158.688 583.8481 C
149.9761 590.6162 146.376 594.144 137.0161 602.6401 c
128.3042 610.5601 125.3521 625.752 129.3838 639.6479 C
130.6802 642.6001 132.6958 647.928 133.8481 650.9519 C
136.2241 659.0879 147.6719 669.0959 154.7998 667.8721 C
179.7842 683.4961 205.1279 686.7358 229.248 698.4719 C
230.832 708.624 236.6641 718.2 244.728 724.896 C
262.6563 747.936 295.0562 759.0959 320.688 746.856 C
322.416 747.792 326.9521 752.2559 329.3999 752.9761 c
331.3438 753.624 333.4321 753.48 335.52 752.832 C
342 750.6001 350.064 747.144 356.6162 745.2 C
360.5762 744.408 365.688 740.8799 365.5439 737.5679 C
371.52 731.448 371.3042 734.9041 372.4561 728.856 C
374.04 727.6318 376.8481 724.6799 378.7202 722.9519 c
381.0962 720.72 382.4639 719.5679 382.0322 716.76 C
381.6719 714.6001 383.04 709.488 382.752 707.3281 C
382.4639 705.5278 381.8882 703.1519 380.6641 702.2161 C
378.4321 700.5601 376.3438 703.0081 374.7598 704.376 C
372.3838 701.28 368.7119 695.8799 366.3359 692.856 C
377.1357 693.864 L
381.0962 696.96 391.4639 696.6719 395.7119 696.6001 C
397.8721 696.168 399.0962 695.304 400.5361 696.384 C
406.3682 699.7681 412.0562 698.616 416.2319 698.2559 C
417.7441 698.2559 419.04 697.3921 420.6958 697.104 C
422.4961 700.344 433.9438 702.144 438.2642 700.5601 C
444.5278 703.656 453.6719 701.4961 458.3521 696.6001 c
471.0962 683.208 471.312 655.2 458.3521 646.8479 c
454.8242 644.6162 450.3599 644.6162 445.9678 645.1919 C
441.0718 643.9678 433.2959 641.52 425.7358 645.1919 C
423.792 645.2639 420.48 643.896 418.6079 643.1758 C
419.1841 643.1758 414.3599 616.0322 414.936 611.5679 C
415.7998 593.5679 418.3921 574.1279 421.0562 557.9277 C
428.3281 554.2559 423.936 539.6401 422.7842 542.376 C
424.728 526.1758 425.3042 508.6802 428.3999 493.0562 C
429.3359 484.2002 429.7681 475.6318 429.9121 466.7759 C
430.272 462.312 431.4238 461.4482 433.8721 457.4878 C
435.6001 454.752 433.8721 452.7358 432 451.3682 C
425.4482 446.832 418.3921 442.9438 412.2002 437.9761 C
407.5918 434.2319 402.9121 433.2959 397.8721 434.376 c
397.0801 434.52 393.7681 435.6719 394.1279 435.7441 C
408.7441 405.2881 417.3838 372.6001 430.6318 341.5679 C
431.064 340.6318 444.2402 345.8159 447.9839 325.728 C
448.0562 319.4639 450.2158 305.7842 451.2959 295.272 c
452.0879 287.6401 454.4639 281.0879 449.5679 280.6563 C
449.5679 280.6563 L
f
1 D
343.1519 551.4482 m
324.5762 519.7681 286.6318 492.4082 247.752 487.5122 C
247.104 487.2241 249.1201 484.2002 250.6318 484.272 C
292.5361 489.2402 330.4082 521.3521 344.6641 552.8882 C
344.376 553.0322 343.4399 551.3042 343.1519 551.4482 C
343.1519 551.4482 L
f
290.5918 503.856 m
282.7441 514.9438 281.5918 527.2559 280.9438 541.0801 C
279.8638 540.792 279.144 540.3599 279.144 539.856 C
278.7119 522.2158 283.3921 511.9922 287.6401 502.272 C
288.8638 502.8481 289.6563 503.3521 290.5918 503.856 C
290.5918 503.856 L
f
286.2002 501.6958 m
280.6563 510.0479 277.5601 520.0562 276.6958 529.7759 C
276.4082 529.4878 276.3359 529.272 276.3359 528.9839 C
276.624 522.5762 273.312 501.0479 286.2002 501.6958 C
286.2002 501.6958 L
f
301.104 476.3521 m
299.1602 473.04 292.104 463.896 290.3042 462.2402 C
296.5679 464.1118 300.4561 473.7598 301.104 476.3521 C
301.104 476.3521 L
f
288.2881 455.6162 m
292.6079 455.9038 298.1519 462.6001 298.9438 467.5679 C
297.5762 465.6958 295.4878 463.0322 288.2881 455.6162 C
288.2881 455.6162 L
f
278.1357 657.5039 m
279.144 664.2 280.3682 671.9761 282.4561 679.824 C
275.832 669.312 278.208 658.8 278.1357 657.5039 C
278.1357 657.5039 L
f
278.4238 655.344 m
278.2798 655.2 277.7041 653.9761 277.4878 653.9041 C
276.1201 657.4321 276.3359 574.5601 286.416 571.6802 C
280.2959 599.3281 277.416 630.0718 278.4238 655.344 C
278.4238 655.344 L
f
359.7842 692.28 m
352.2959 690.7681 347.7598 683.064 348.4082 675.2161 C
349.5601 675.072 351.2158 674.5679 352.584 673.5601 C
351.5762 682.344 354.0962 686.8799 359.7842 692.28 C
359.7842 692.28 L
f
354.312 677.9519 m
355.6079 673.7041 356.7598 669.4561 358.272 665.3521 C
360.8638 658.656 363.3838 651.96 368.064 646.416 C
371.8799 643.3921 376.9199 634.6079 376.416 633.8159 C
375.8398 633.3838 373.9678 634.3198 373.1758 635.1841 C
371.2319 637.272 369.6479 639.7197 367.7041 641.8799 C
364.4639 645.48 361.8721 649.4399 359.7842 653.832 C
357.1919 659.376 355.3921 663.552 352.7998 670.176 C
350.4238 672.48 341.4961 676.8 345.8159 667.2241 C
349.3438 660.96 350.064 657.072 352.728 652.824 C
355.8242 647.3521 363.2402 634.248 366.1919 630.2881 C
359.7842 632.9521 355.3921 645.2639 351.792 650.1599 C
350.3521 648.4321 349.6318 640.4399 351 637.9199 c
352.7998 634.5361 355.0322 630.7197 357.3359 626.5439 c
363.4561 615.4561 379.2241 598.104 379.7998 589.104 C
379.9438 573.2642 380.0879 563.1118 379.0801 548.064 C
381.6001 533.376 416.52 549.144 418.3921 556.3438 C
415.584 573.8398 414.5039 593.064 411.8398 610.6318 C
412.5601 621.144 414.8638 631.6563 415.5122 641.9521 C
412.5601 641.9521 410.3281 641.6641 408.0239 641.6641 C
408.3838 638.856 408.6719 637.9199 407.5918 635.3281 C
406.0078 638.064 405.792 641.3037 403.9199 642.7441 c
401.688 644.4722 397.8721 646.5601 396.5762 648.4321 C
395.1357 651.0239 392.3999 652.824 391.0322 655.416 C
389.376 658.728 389.52 663.2639 387.2881 666.072 C
383.688 671.1121 377.4238 671.2559 379.0801 663.696 C
379.9438 659.0161 380.0879 653.3281 382.104 649.0801 C
384.2642 644.3999 386.9277 642.8159 389.8799 638.5679 C
394.1279 632.52 396.792 631.2241 404.064 631.8721 C
398.3042 628.5601 388.0801 633.3838 387.6479 637.416 C
382.3921 645.48 378.8638 649.0081 373.3198 658.8721 C
369.936 661.896 367.7759 667.1519 365.4722 670.6079 C
363.96 676.512 360 681.3359 354.6719 680.688 C
353.5918 680.616 353.7358 679.824 354.312 677.9519 c
354.312 677.9519 l
f
312.6958 720.072 m
308.4482 723.7439 269.208 735.7681 251.1357 705.6719 C
256.752 708.3359 262.0801 712.512 268.5601 712.728 c
274.5361 712.9438 280.584 713.0161 286.5601 714.6001 C
291.2402 716.3281 301.3921 719.4961 311.688 714.384 C
312.1919 716.1841 311.832 718.0559 312.6958 720.072 C
312.6958 720.072 L
f
312.624 704.304 m
311.688 705.168 308.0879 707.04 306.7202 707.9761 c
304.272 709.7041 301.104 708.7681 299.0161 706.104 C
301.6802 707.4719 303.9121 707.4719 306.0718 705.312 c
308.376 703.0081 310.104 703.0801 312.624 704.304 C
312.624 704.304 L
f
436.752 682.0559 m
448.7759 672.9839 440.856 663.3359 440.4961 660.7439 C
441.5762 659.304 442.4399 658.4399 444.168 657.936 C
453.312 661.6079 453.312 686.52 439.0562 688.248 C
438.1919 686.592 437.04 684.6479 436.752 682.0559 C
436.752 682.0559 L
f
441.7202 689.616 m
459.8638 680.9761 451.3682 657.936 446.1841 656.4241 C
450.792 653.688 454.1758 657.3599 455.9038 660.8159 c
459.0718 667.2241 459.4321 687.24 446.2559 691.1279 C
444.4561 690.7681 443.0161 691.272 441.7202 689.616 C
441.7202 689.616 L
f
188.4961 417.2402 m
185.1118 418.0322 184.248 414 180.936 414.144 c
175.4639 414.4321 169.6318 416.8081 164.8081 419.1118 C
160.0562 421.3438 157.4639 425.0161 154.3682 428.9761 C
148.248 436.6079 139.752 440.7842 131.1841 444.8882 C
128.7358 446.04 127.3682 445.104 127.6558 442.3682 C
128.1602 436.4639 128.8081 430.5601 129.5278 424.6558 C
129.8159 422.7119 130.752 420.9121 133.0562 420.6958 C
136.0078 420.4082 138.96 420.2642 141.9121 420.3359 C
145.6558 420.4082 148.752 419.1118 151.6318 416.8081 C
156.5278 412.7759 161.6401 408.96 166.6802 405.0718 C
168.48 403.7041 169.9199 403.8481 171.4321 405.7202 C
174.6001 409.3921 178.7041 410.1118 183.0962 411.7681 C
185.3281 412.5601 187.1279 415.4399 188.4961 417.2402 C
188.4961 417.2402 L
f
228.3838 418.6079 m
227.3042 419.1841 226.7998 417.6719 227.52 417.0962 c
228.8882 416.0161 228.96 414.8638 230.2559 413.9277 c
232.416 412.4878 234.7202 411.2642 237.0962 410.3281 C
238.9678 409.4639 244.7998 411.3359 241.272 412.9922 C
237.0239 414.7202 232.416 416.2319 228.3838 418.6079 c
228.3838 418.6079 l
f
221.3281 302.9761 m
214.8481 301.248 208.1519 300.0962 201.8159 297.8638 c
194.3999 295.2002 184.4639 293.1841 176.9761 295.416 c
169.1279 297.7202 160.5601 298.0078 153.2158 298.1519 c
144 298.4399 138.6001 297.6479 131.04 296.4961 c
121.6802 295.0562 112.4639 293.688 103.104 293.04 C
88.416 292.0322 95.4722 273.8159 104.3999 269.1357 C
110.3042 266.1118 114.5518 257.688 113.04 251.208 C
112.1758 247.6079 113.1841 244.6558 114.9121 241.7041 C
119.52 233.3521 127.4399 226.2241 134.7119 220.104 c
142.3438 213.6958 150.0479 207.2881 157.752 200.8799 C
161.7119 197.6401 165.0239 192.8882 169.1279 190.2241 C
178.272 184.3198 187.8481 179.1362 197.064 173.4482 C
229.9678 153.144 263.0161 133.7759 292.3198 103.6079 c
310.4639 84.7441 329.3999 130.6802 328.4639 148.3921 c
326.7358 180.144 283.248 223.5601 263.6641 245.2319 C
259.4878 250.0562 255.4561 255.2402 250.4878 259.272 C
241.2002 266.832 231.2642 273.6001 221.5439 280.6563 C
219.8882 281.8799 218.9521 282.96 220.104 285.0479 C
221.688 287.7842 223.1279 290.6641 225 294.2642 C
219.96 293.9038 216.5039 294.7681 213.48 289.728 C
211.5361 286.416 209.6641 288.144 207.5762 289.0801 C
208.4399 293.6162 215.7119 298.6563 219.6001 299.8799 C
221.04 300.312 222.0479 301.104 221.3281 302.9761 C
221.3281 302.9761 L
f
164.9521 593.208 m
168.48 586.584 171.7202 580.104 175.3198 573.7681 C
178.0562 568.8721 185.4722 566.9277 189.7202 563.3999 C
184.4639 561.0239 176.2559 566.6401 170.7119 567.936 C
169.6318 568.2241 167.7598 567.3599 166.9678 566.4238 C
147.4561 540.7197 135.2881 499.4639 135.2881 470.8799 C
135.2881 468.4321 136.6558 467.3521 138.96 467.3521 C
140.832 467.3521 142.9922 467.6401 144.792 467.4961 C
152.6401 465.7681 154.1519 470.6641 160.3438 473.688 C
160.1279 469.584 158.4722 469.1519 155.6641 466.1279 C
153.2158 463.4639 150.2642 462.6001 146.6641 462.8882 C
143.856 463.104 140.9038 462.8159 138.312 461.8799 C
135.5762 460.9438 133.7041 458.4961 132.0479 455.9761 C
131.04 454.104 127.2241 449.6401 125.4238 449.4961 c
122.7598 449.3521 121.4639 448.2002 119.2319 446.4722 c
117.3599 444.96 115.8481 443.5918 113.1841 443.0879 C
102.0962 440.7842 104.9038 434.0161 103.5361 429.2642 C
101.6641 426.96 99.7202 424.7998 97.7759 422.5679 C
97.272 425.0879 100.0801 429.5518 101.0161 431.856 C
102.312 435.0239 103.4639 438.2642 104.832 441.3599 C
105.1919 442.1519 105.8398 443.0161 106.6318 443.4482 C
109.5122 445.0322 112.4639 446.3999 115.3438 447.9839 C
115.9922 448.3438 116.5679 449.1357 116.9282 449.856 C
119.1602 454.752 122.3999 459.792 122.3999 465.1919 C
120.0962 462.5278 118.2959 459.6479 116.2798 456.8398 C
113.6162 453.2402 110.1602 450.8638 106.416 448.416 C
102.4561 445.8242 98.856 442.0078 96.2642 437.9761 C
92.0161 431.5679 88.7041 424.584 85.0322 417.96 C
87.0479 415.8721 95.3281 405.2881 98.2798 402.9121 C
102.6719 404.4961 106.272 402.1919 109.584 399.6719 C
110.5918 401.9761 111.96 403.9199 112.0322 405.936 C
112.3198 414.2881 110.2319 424.584 112.1758 432.7202 C
112.9678 435.8159 115.7759 438.4082 118.2959 440.064 C
118.584 436.4639 117.936 432.792 118.2959 429.1201 C
119.0161 421.4878 120.2402 419.1841 117.936 411.0479 C
115.416 402.2642 111.168 393.9121 107.856 385.416 C
121.3198 371.9521 149.04 355.5361 168.7681 354.6001 c
190.8721 353.52 215.4238 342.7202 229.3198 368.4238 c
236.9521 382.3921 246.0239 397.6558 254.3042 411.1919 C
256.752 415.2959 257.3999 418.752 255.0239 422.7119 C
250.0562 430.7041 241.3438 434.3042 238.6079 444.4561 c
235.9438 454.3921 231.48 464.4722 229.5361 474.8398 C
229.8242 474.9121 239.6162 459.0718 242.208 450.7202 c
244.7998 442.1519 250.7041 432.792 254.9521 426.6719 C
258.9121 433.8721 264.96 442.728 271.1519 448.0562 C
275.9038 447.6958 281.9521 450.5039 284.7598 452.3042 C
284.832 452.0161 274.104 449.3521 273.168 450.5039 C
275.3281 451.7998 277.7041 453.2402 278.5679 454.6802 C
276.9121 453.8882 275.2559 453.168 273.96 452.8081 C
274.752 455.688 273.96 456.6958 273.5278 457.3438 C
276.0479 458.064 279.144 459.2881 282.6001 460.2959 C
281.5918 457.7759 281.8799 458.7119 280.584 456.3359 C
283.8242 459.5762 285.1201 461.2319 286.0562 463.0322 C
280.4399 463.4639 277.4878 462.8159 272.9521 460.4399 C
267.9121 455.832 255.2402 458.1357 254.6641 463.4639 C
244.3682 465.2642 239.5439 473.3281 237.8882 477.5762 C
233.856 478.7998 224.4961 487.4399 222.2642 488.1602 C
217.5122 490.8242 216.936 487.8721 212.5439 491.2559 C
199.7998 498.0239 204.624 531.8643 211.752 555.3359 c
215.1362 566.4238 214.272 576.7197 214.5601 581.04 C
209.0879 578.6641 199.8721 573.8398 194.04 573.48 C
194.9038 578.376 198.8638 581.4722 202.4639 585.0718 c
208.584 591.2642 211.1758 600.1919 214.416 608.1118 c
216.5039 613.2959 216.3599 619.6318 212.9761 624.3838 C
210.8882 620.2798 207.8638 616.6079 204.7681 613.4399 c
201.0239 609.48 196.9199 605.9521 193.8242 601.3438 C
186.7681 591.0479 175.6802 592.5601 164.9521 593.208 C
164.9521 593.208 L
f
319.248 723.0959 m
286.9922 737.7119 260.4238 730.2959 241.7759 701.4961 C
236.3042 698.616 230.3281 695.8081 224.5679 693.6479 C
204.1919 684.144 165.8882 675.72 155.3042 661.3201 C
130.6802 622.0801 172.0801 602.6401 204.3359 627.48 C
210.0962 631.8721 218.2319 636.48 222.7681 641.7358 C
241.1279 662.9041 264.3838 680.3281 286.2002 697.824 C
287.5679 698.9041 291.5278 700.9199 293.04 701.856 C
293.1118 701.7839 272.8081 683.064 271.2959 681.696 C
278.4961 685.512 281.5918 688.104 285.9121 691.272 c
290.8799 694.9438 297.5762 696.7439 303.5518 696.0239 C
306.792 695.2319 310.248 693.864 313.9922 692.928 C
313.3438 713.8081 l
313.2002 717.1201 313.7041 720.864 319.248 723.0959 C
319.248 723.0959 L
f
535.752 105.624 m
534.6719 111.0239 532.6563 115.9199 527.1841 116.2798 C
513.3599 117 494.3521 124.3438 486.2158 135.8638 C
479.52 145.2241 473.3999 154.9438 467.064 164.52 C
462.0962 172.2241 459 180.5039 457.9922 189.7202 C
457.272 195.6958 456.0479 201.6001 455.04 207.5762 C
452.6641 222.2642 450.2881 236.8799 448.6318 251.6401 c
448.272 255.2402 447.4082 259.3438 445.9678 262.0801 c
441.2158 270.6479 444.0239 275.5439 430.8481 275.3281 c
421.0562 275.1841 408.0239 269.7119 401.5439 263.4482 c
398.6641 260.6401 396.7202 257.3999 397.6558 254.4482 C
399.0962 249.2642 400.5361 244.1519 401.688 238.896 c
402.4082 235.584 402.8398 232.272 406.584 230.9038 C
411.624 228.96 415.7998 226.4399 421.272 226.7998 c
427.6079 227.3042 433.7998 228.7441 440.208 228.312 C
444.312 227.9521 446.04 222.1919 442.2959 220.104 C
439.2002 218.3042 436.0322 216.3599 433.2959 214.0562 C
427.5361 209.1602 427.3921 208.5122 431.208 201.8159 C
434.5918 195.9121 438.48 190.3682 441.936 184.5361 C
442.6558 183.312 443.0161 181.1519 442.3682 180 C
441.8638 179.1362 439.6318 178.9199 438.1919 178.9922 C
434.4482 179.064 431.7842 181.4399 429.0479 183.8159 C
421.7041 191.7358 412.416 197.7842 408.312 200.1602 C
409.0322 191.8799 409.3921 184.3198 411.9839 176.04 c
413.1357 172.584 412.4878 171.7202 415.2959 174.168 c
417.2402 175.8242 419.1118 177.624 421.0562 179.3521 C
422.5679 180.6479 423.792 180.2158 424.0801 178.2002 C
424.5122 175.1758 424.1519 171.3599 428.7598 171.2881 C
433.9438 171.2881 439.416 172.584 443.52 168.624 c
447.5518 164.5918 431.7842 159.9839 428.9761 158.3999 C
425.2319 157.1758 423.7202 154.7998 424.0078 151.6318 C
429.5518 152.856 435.0962 154.2959 440.6401 155.4482 c
457.9922 159.1919 456.48 149.1841 454.4639 135.6479 c
452.5918 123.3359 456.8398 115.9199 465.6958 110.1602 c
472.752 105.624 476.4961 104.1841 484.416 106.272 c
496.5122 109.4399 510.5518 116.6401 521.856 114.6958 C
516.96 112.3921 514.3682 108.5762 512.4961 105.6958 C
505.0078 101.3042 495.4321 100.1519 486.8638 98.7119 c
476.4238 96.9839 467.2798 99.6479 457.5601 102.96 c
442.2959 108.2158 431.3521 119.52 414.144 112.6802 C
424.584 111.0239 435.6001 109.2959 444.8882 104.6162 c
460.5122 96.6958 469.2241 92.2319 489.3838 94.9678 c
506.0879 97.2002 523.9438 101.5918 535.752 105.624 C
535.752 105.624 L
f
447.1919 291.8882 m
444.6719 301.896 444.6001 319.248 444.0239 323.9277 C
443.3042 330.1919 438.7681 338.9038 430.7759 336.6719 C
405.5762 329.04 379.0078 321.48 354.5278 313.2002 c
345.4561 310.1758 345.3838 308.1602 345.0239 301.752 C
349.2002 304.0562 364.3198 308.4482 375.0479 305.856 c
378.4321 304.9922 381.96 301.752 376.0562 300.3838 c
373.752 299.8799 362.2319 299.6641 362.376 296.1357 C
362.6641 289.728 364.5361 286.416 368.064 281.3042 c
370.3682 278.1357 372.168 276.3359 368.4238 273.5278 c
365.5439 271.3682 362.52 269.4238 359.6401 266.9038 C
357.48 264.8882 360.2158 262.7998 364.4639 262.9438 c
387.5039 263.8081 414.2158 279.2881 439.2002 282.8159 c
444.5278 283.5361 448.7759 285.48 447.1919 291.8882 c
447.1919 291.8882 l
f
303.1919 446.832 m
304.272 455.3281 310.752 464.7598 303.5518 475.3438 C
295.4878 444.312 304.4878 430.272 275.3281 418.4639 c
267.1919 415.1519 263.3042 408.7441 264.0239 399.6719 C
279.144 417.8882 322.5601 449.2798 346.6079 462.5278 c
349.4878 464.1118 350.064 468.2881 349.272 470.2319 C
348.48 472.3198 347.1841 472.6802 345.3838 471.2402 C
344.2319 470.2319 338.7598 464.3999 337.1758 464.9761 C
334.3682 465.9839 336.6001 471.168 337.6802 472.6802 C
339.9121 475.6318 342.6479 478.2241 345.312 480.8159 C
346.1758 481.6802 347.6162 482.5439 348.6958 482.4722 C
352.5122 482.1118 352.0801 487.0801 352.1519 489.5278 C
352.2241 492.8398 353.52 495.7202 355.9678 497.8799 C
359.2798 501.48 370.2241 508.9678 372.4561 513.936 C
374.3999 520.5601 375.1919 525.7441 374.7598 532.0801 C
370.728 536.6162 369.4321 546.5518 375.9839 550.2959 C
377.2798 553.104 378.144 576.3599 376.416 589.1758 c
375.9121 593.1357 372.6001 599.04 369.6479 602.208 C
363.5278 561.6719 341.2798 526.5361 335.3042 514.5117 C
335.0879 508.752 332.7119 499.6079 324.0718 493.7041 C
324.3599 470.376 319.9678 456.6958 303.1919 446.832 C
303.1919 446.832 L
f
419.832 538.4878 m
406.1519 530.4238 396.792 526.3198 379.5122 530.208 C
379.1519 530.2798 372.96 477.0718 372.6001 470.0161 C
372.0239 460.6558 373.0322 451.7998 381.4561 445.6802 C
387.6479 441.2158 388.8721 442.6558 395.7119 439.4878 C
400.3921 437.3281 404.4961 437.9761 407.3042 442.2959 C
412.6318 450.5039 416.1602 459.5762 419.04 468.936 C
421.9922 478.728 425.4482 486.8638 424.0801 497.5918 C
423.144 504.4321 421.9922 511.1279 421.272 517.9678 C
420.5518 524.8081 420.3359 531.6479 419.832 538.4878 C
419.832 538.4878 L
f
342.0718 374.6162 m
343.8721 374.3281 345.312 384.8398 350.856 383.1118 C
355.248 381.7441 351.8638 366.624 351.2158 363.4561 c
350.1357 357.6958 350.856 352.3682 351.8638 345.7441 c
353.8081 333.7202 355.5361 323.3521 370.5122 324.0718 C
384.5518 326.4482 400.8242 331.7759 412.9922 339.624 C
415.728 341.3521 416.376 344.3042 414.5039 346.896 C
409.6802 353.8081 408.4561 364.8242 403.0562 371.3042 C
396.144 379.2241 389.0879 379.8721 387.2158 389.7358 C
385.272 398.7358 383.3281 403.7041 375.1201 408.5278 C
368.4238 412.5601 363.312 413.064 359.1357 409.4639 c
355.752 406.584 346.5361 395.208 342.5762 385.7041 c
340.7759 381.3838 340.2002 377.3521 342.0718 374.6162 C
342.0718 374.6162 L
f
363.168 613.7998 m
361.6563 615.6719 361.584 615.5278 359.4238 619.416 C
358.6318 586.5117 354.0239 559.8721 333.7202 529.416 c
311.688 496.3682 240.624 428.7598 237.6719 514.3682 C
238.6079 532.3682 243.6479 561.96 248.1118 584.4961 c
249.9121 593.4961 250.9922 601.3438 252.144 609.1919 C
252.6479 616.6802 252.5762 624.2402 253.0078 631.728 C
253.5122 641.3037 254.5918 655.7759 255.168 665.3521 C
255.5278 666.072 250.9922 661.824 250.1279 659.8081 C
249.6958 653.2559 248.9038 646.7041 248.832 640.0801 C
248.7598 626.1841 247.6802 612.3599 245.8081 598.5361 C
243.8638 584.208 240.7681 572.4722 238.3198 557.4961 C
206.7119 368.3521 366.5518 512.5679 363.168 613.7998 C
363.168 613.7998 L
f
351.144 632.52 m
330.9839 630.7197 L
325.1519 630.6479 315.5039 628.9922 315.792 642.168 C
315.4321 656.3521 L
311.832 656.064 310.104 651.6719 309.0239 649.0081 C
306 641.7358 302.1118 636.1201 302.7598 627.8398 C
302.9761 625.6802 303.0479 622.1519 302.7598 620.064 C
301.8242 614.0879 305.208 609.624 308.8799 606.168 C
313.9199 601.5601 320.04 598.1758 327.0239 597.0239 C
330.624 596.4482 334.2241 596.0879 337.8242 595.7998 C
342.936 595.6563 355.6802 595.1519 355.896 602.856 C
355.752 605.0161 356.3281 609.7681 356.04 612.144 C
346.6079 609.624 342.792 617.2559 336.312 618.1201 C
337.248 619.6318 338.2559 620.1357 339.624 621 C
342.0718 622.5117 344.9521 623.376 347.1118 625.104 C
350.5679 627.48 352.2959 627.3359 354.6719 626.2559 C
353.0161 628.7041 351.5039 630.8643 351.144 632.52 C
351.144 632.52 L
f
152.3521 664.416 m
146.52 663.2639 141.9121 661.3201 138.8882 655.7759 c
132.4082 643.9678 127.0801 631.728 131.1118 617.3281 c
133.4878 608.6162 142.416 601.6318 153.5762 598.3198 C
164.6641 595.2959 184.3198 592.416 191.6641 603.5039 C
194.3281 607.4639 197.2798 610.9199 201.0962 613.9438 c
206.1362 617.9761 212.688 623.8081 211.0322 629.3521 C
181.8721 600.48 130.896 611.208 148.8242 656.3521 c
150.0479 659.52 152.4238 663.9839 152.3521 664.416 C
152.3521 664.416 L
f
307.4399 730.512 m
311.1841 729.2161 315.5762 728.928 322.3438 724.5361 C
324.7202 724.3921 331.416 724.752 333.5762 724.6079 C
337.3198 723.7439 338.3281 723.4561 341.7119 722.448 C
342.5039 720.072 344.9521 715.6079 346.4639 712.9438 C
344.1602 709.344 341.7842 701.208 345.8159 698.3281 C
347.2559 697.3201 348.6958 697.6079 349.272 699.3359 C
350.9277 702.6479 352.584 706.6799 353.8799 710.208 c
354.5278 712.0081 354.6719 713.6641 354.3838 715.752 c
354.2402 717.1919 353.376 719.4241 352.9438 720.936 C
352.2241 723.384 351.2881 725.3281 349.4878 727.0559 C
348.2642 728.28 347.3281 729.792 346.248 731.1599 C
346.5361 731.448 346.896 731.7358 347.1841 732.0239 C
349.8481 729.2161 352.5122 726.408 355.104 723.6001 C
355.248 723.4561 355.248 723.24 355.3198 723.0959 C
356.1118 720.4321 357.1201 717.7681 357.624 715.104 C
357.9121 713.592 357.624 711.864 357.0479 710.4961 C
355.896 707.688 354.2402 705.0959 353.1602 702.2881 C
352.7998 701.3521 352.9438 698.9761 353.1602 697.824 C
354.168 698.3281 354.8159 697.4639 355.8242 698.2559 c
359.2798 700.8479 363.0239 706.032 365.688 708.8398 C
366.48 709.7759 366.9121 711.4321 366.7681 712.656 C
366.3359 715.4639 365.3999 718.272 364.6079 721.0081 C
363.7441 724.248 362.6641 727.416 362.0161 730.728 C
361.6563 732.384 362.1602 734.1841 362.0879 735.9839 C
362.0879 736.7041 361.6563 737.7839 361.1519 738 C
357.8398 739.512 354.4561 740.8081 351.144 742.176 C
348.3359 743.3999 345.4561 744.3359 342.8638 745.9199 C
338.5439 748.656 332.064 750.6001 328.104 747.5039 C
320.04 741.96 314.3521 736.0559 307.4399 730.512 C
307.4399 730.512 L
f
200.0161 163.2959 m
199.1519 164.6641 197.208 164.8081 195.3359 164.0161 C
193.6079 163.2241 192.168 161.9282 190.584 160.8481 C
186.5518 158.04 182.9521 154.8721 182.8081 149.3999 C
182.7358 148.6802 182.7358 147.8159 182.4482 147.2402 C
181.9438 146.376 181.2241 145.2959 180.3599 145.0801 C
179.7842 144.936 178.4878 145.8721 178.2002 146.6641 C
177.4082 148.4639 176.9761 150.48 176.3999 152.4961 C
174.5278 159.5518 171.8638 166.0322 164.0161 168.3359 C
163.2959 166.6079 162.4321 165.0962 161.9282 163.4399 C
160.7759 159.7681 159.9839 156.168 161.6401 152.3521 C
163.1519 148.9678 164.376 145.5122 165.6719 142.1279 C
167.4722 137.5918 169.416 133.3438 173.2319 130.0322 C
177.3359 126.4321 182.1602 125.2798 187.0562 123.7681 C
189.3599 123.0479 192.2402 122.2559 193.6079 120.4561 C
200.8799 111.6719 201.2402 110.0161 210.7441 104.9761 C
212.4722 104.04 213.8398 104.4722 214.9199 106.2002 C
196.7759 118.0078 189.936 144.4321 200.0161 163.2959 C
200.0161 163.2959 L
f
331.2002 537.9121 m
338.1841 546.6958 344.2319 554.6162 348.9839 565.9922 c
351.0718 571.0322 352.8721 576.0718 351.2881 581.9038 C
350.6401 584.064 350.5679 586.4399 350.1357 588.6719 C
349.7759 590.688 348.8398 591.9839 346.3921 591.9839 C
343.3682 591.9121 340.3438 592.3438 337.248 592.2002 C
336.0239 592.2002 334.728 591.3359 333.7202 590.5439 C
331.6318 589.0322 333.2158 586.9438 332.9277 585.144 C
332.3521 581.1841 334.3682 578.4482 336.6001 575.7119 C
337.6802 574.272 339.0479 572.9038 336.6719 571.6802 c
335.8081 571.248 335.8081 570.8882 335.5918 569.8799 c
335.3042 568.9438 334.728 568.2241 334.2241 567.3599 C
331.0562 569.52 329.1841 576.3599 327.4561 580.5361 C
326.376 583.1279 323.6401 584.856 322.416 583.416 C
320.6162 581.2559 318.7441 579.0239 317.6641 576.5762 C
316.584 573.8398 316.3682 570.96 318.4561 568.1519 C
325.3682 558.8643 328.8242 549 331.2002 537.9121 C
331.2002 537.9121 L
f
112.4639 158.7598 m
118.584 175.104 118.6558 184.896 109.3682 197.4238 c
104.3281 204.2642 98.4961 202.8242 91.0078 201.8159 C
91.0078 193.4639 91.0078 184.6802 91.0078 175.6079 C
92.4482 178.2002 95.3281 187.272 99.144 183.8159 C
95.7598 173.7358 94.1758 165.0239 98.4238 155.2319 C
100.3682 150.6958 111.7441 156.7441 112.4639 158.7598 C
112.4639 158.7598 L
f
218.1602 555.1919 m
222.0479 563.04 225.3599 582.48 227.5918 592.7041 C
230.5439 609.6958 230.1118 627.9121 230.832 645.2639 C
228.0962 642.312 227.4482 640.8721 224.2798 637.7759 C
223.9199 628.5601 223.2002 618.624 223.4878 608.832 c
223.7759 595.8721 221.7598 577.3682 218.52 565.5601 c
214.3438 550.5117 197.7119 497.7358 217.5122 492.3359 C
208.4399 508.6079 212.9761 529.0562 217.728 552.168 C
223.1279 545.6162 227.8081 539.208 232.7041 533.3042 C
232.8481 537.2642 233.7842 541.4399 234.144 544.4639 c
234.4321 546.6958 235.2959 547.272 232.6318 548.9277 C
227.8081 551.8799 223.4878 553.6802 218.1602 555.1919 C
218.1602 555.1919 L
f
433.6558 689.5439 m
428.1118 677.376 430.3438 658.0801 443.0161 650.8081 c
448.2002 647.856 457.272 650.0161 460.728 655.8479 c
466.9922 666.5039 463.752 689.76 452.4482 695.0879 c
445.6802 698.3281 436.6802 696.168 433.6558 689.5439 c
433.6558 689.5439 l
f
371.7358 507.96 m
367.4878 504.144 363.2402 499.248 359.2798 495.4321 C
358.0562 494.2798 356.7598 492.5518 356.688 491.04 C
356.3999 486.2158 355.6079 477 355.3198 469.6558 c
355.104 464.688 355.248 461.8081 357.48 457.7041 c
359.5679 453.6719 362.2319 450.7202 365.1118 446.832 c
368.4238 442.2959 369.936 439.9922 373.8242 438.1201 c
376.4878 436.896 387.4321 433.0801 388.7998 436.1758 C
384.9121 437.7598 382.5361 438.624 378.7202 440.6401 c
372.7441 443.6641 368.208 444.0239 366.1919 451.9438 C
365.1118 456.1919 364.1758 460.584 362.8799 464.832 C
362.0879 467.4961 362.2319 469.9438 363.2402 472.3921 C
365.1118 476.9277 367.6318 481.3198 368.7119 486 C
370.2959 492.8398 370.7998 501.1919 371.7358 507.96 C
371.7358 507.96 L
f
182.8799 316.0801 m
177.0479 316.584 165.3838 319.1758 156.3838 319.5361 c
127.2241 320.7598 90.8638 320.3281 66.0239 332.7119 C
75.4561 320.5439 130.3921 301.8242 182.8799 316.0801 C
182.8799 316.0801 L
f
269.7119 498.8159 m
262.2241 506.3042 259.7759 517.5361 256.1758 526.6079 C
257.3999 525.7441 259.0562 523.0078 260.2798 521.7842 C
258.2642 526.6079 256.752 531.6479 256.3198 537.1201 C
259.416 528.9839 261.5762 516.96 270.792 506.8081 C
264.6001 518.1118 258.0479 531.2881 259.416 544.3198 c
260.1357 551.4482 262.9438 558.5762 264.312 565.6318 C
265.896 573.6958 267.1201 581.688 268.4878 589.752 C
268.6318 590.6162 268.5601 591.5518 268.5601 592.416 C
267.7681 590.9038 267.7681 589.3198 267.3359 587.8081 C
266.4722 584.4961 267.2642 580.752 264.312 577.7998 C
263.2319 576.792 262.8721 574.2002 263.2319 572.5439 C
264.2402 567.3599 263.3042 562.3921 261.7202 557.4961 C
259.9922 552.0239 257.4722 546.2642 255.3838 540.2881 C
254.2319 547.5601 257.9761 563.04 259.5601 567.8643 C
259.5601 564.9839 260.064 560.3042 260.064 557.3521 C
260.9277 561.8882 261.6479 566.4238 261.792 570.96 C
261.8638 575.4961 264.0962 579.4561 264.0239 584.064 C
263.8799 588.0239 265.6802 591.9839 266.3281 596.0161 C
266.7598 598.3921 266.7598 600.9121 266.9038 603.3599 C
266.688 603.3599 266.4722 603.3599 266.1841 603.4321 C
264.8882 597.6001 263.5918 591.7681 262.2959 586.0078 C
262.0801 592.416 265.3198 598.5361 263.2319 605.5918 C
263.0161 604.728 262.8721 604.3682 262.7998 604.0078 C
261.2881 594.0718 259.9922 584.1357 258.1201 574.272 C
254.3042 553.248 249.624 539.1357 255.4561 520.8481 c
257.1841 515.3042 262.1519 501.6958 269.7119 498.8159 C
269.7119 498.8159 L
f
144.936 183.0962 m
144.792 183.2402 144.6479 183.4561 144.5039 183.6001 C
142.3438 182.3042 140.1118 181.0801 138.0239 179.7119 C
135.3599 178.0562 134.5679 175.104 132.9121 172.7998 C
129.96 168.5518 128.6641 163.1519 124.2002 159.9121 C
123.6958 159.5518 123.5518 158.5439 122.9038 157.1758 C
125.6401 157.4639 127.7998 158.2559 129.6719 157.8242 C
132.48 157.0322 134.4238 158.1841 136.5122 159.48 C
139.3198 161.2798 142.8481 160.6318 144.2881 157.6802 C
146.6641 153 150.624 151.416 155.52 150.6958 C
154.8721 155.376 154.2959 159.9839 153.5762 164.6641 C
153.144 167.688 152.5679 170.6401 154.728 173.3042 C
156.0962 174.96 157.104 176.832 158.2559 178.7759 C
152.4961 180.6479 146.5918 175.0322 145.0078 169.4878 C
143.7842 170.3521 142.1279 170.856 141.9121 171.792 C
141.3359 174.312 140.5439 176.9761 142.7041 179.3521 C
143.6401 180.4321 144.2158 181.7998 144.936 183.0962 C
144.936 183.0962 L
f
297.5762 563.7598 m
297.7202 563.7598 298.7998 564.3359 299.0161 564.2642 C
292.9678 573.1919 281.6641 634.9678 286.1279 634.104 C
287.2798 618.7681 287.4961 617.832 V
288.7202 636.7681 285.6958 656.28 285.624 672.9121 C
280.7998 666.5039 282.2402 621.6479 287.7842 593.4238 C
281.9521 608.9761 280.1519 636.4082 281.1602 660.384 C
280.8721 660.384 280.584 658.3679 280.2959 658.3679 C
279.792 637.272 279.4321 596.7358 295.272 558.2158 C
294.7681 561.0239 289.9438 582.3359 289.5122 584.9277 C
289.9438 584.4961 296.1357 566.856 297.5762 563.7598 C
297.5762 563.7598 L
f
441 646.416 m
425.9521 654.624 419.1841 683.856 434.1602 697.824 C
428.6162 699.0479 424.2959 697.176 421.1279 693.864 c
412.272 684.5759 412.1279 661.896 422.6401 651.384 c
426.8882 647.136 433.2959 645.0479 441 646.416 C
441 646.416 L
f
417.312 646.488 m
396.792 656.4961 402.5518 690.696 410.9038 695.7358 C
409.1758 696.0239 404.5679 696.0239 402.0479 694.512 C
391.8242 689.04 391.3198 648.6479 408.3838 645.3359 C
411.3359 645.0479 414.3599 645.9839 417.312 646.488 C
417.312 646.488 L
f
375.4082 546.1919 m
367.7759 525.4561 410.3999 532.8721 421.1279 544.8242 c
423.6479 547.6318 421.8481 551.1602 420.624 553.9678 C
409.4639 541.8721 383.688 534.0239 375.4082 546.1919 C
375.4082 546.1919 L
f
242.064 592.416 m
242.4238 596.0879 242.856 600.2642 243 603.8643 c
243.0718 606.7441 243.6479 608.7598 242.208 610.9199 c
239.3999 615.168 238.0322 619.6318 234.6479 623.8799 C
234.4321 623.8081 234.2158 623.7358 234 623.6641 C
233.5679 619.7759 232.7041 598.752 232.8481 598.6802 C
235.6558 596.7358 238.6079 594.5762 242.064 592.416 C
242.064 592.416 L
f
254.6641 563.6162 m
257.1841 578.6641 257.688 597.96 261.5762 613.8721 c
265.5361 629.7842 266.1841 646.6318 266.6162 664.2 C
265.9678 662.9041 265.0322 661.6799 264.6001 660.24 C
264.168 658.8721 264.312 657.3599 264.0962 655.9199 C
263.8799 654.48 263.52 653.04 263.2319 651.6001 C
263.1602 651.6001 263.0161 651.6719 262.9438 651.6719 C
262.8721 652.896 262.9438 656.136 262.8721 657.3599 C
259.7041 657.5759 258.1919 620.064 258.624 619.7759 C
259.9922 628.5601 261.4321 639.5762 262.7998 648.4321 C
263.0161 647.28 263.0879 646.2 262.9438 645.1201 C
262.0078 619.4878 255.5278 591.9121 254.6641 563.6162 C
254.6641 563.6162 L
f
316.728 597.4561 m
315.144 596.7358 314.208 595.9438 313.2002 595.8721 C
308.52 595.584 306.0718 592.9199 306.4321 588.3838 C
306.5762 587.0161 306.5762 585.5762 306.936 584.2798 C
307.6563 581.6162 308.52 578.9521 309.6001 575.7119 C
311.7598 578.4482 312.9121 580.9678 314.856 582.3359 C
318.96 585.144 320.4722 588.8882 320.5439 593.6401 C
320.5439 596.5918 318.7441 596.2319 316.728 597.4561 C
316.728 597.4561 L
f
79.5601 114.2642 m
81.8638 113.04 107.7119 113.7598 110.52 115.9199 C
108.8638 117.3599 107.4961 119.0879 105.7681 120.168 C
102.0962 122.3281 97.9199 122.1118 93.8159 121.896 C
86.7598 121.6079 84.96 118.5122 79.5601 114.2642 C
79.5601 114.2642 L
f
370.2241 668.52 m
368.7119 679.752 371.0161 685.9438 374.2559 691.1279 C
362.5918 689.76 L
359.4238 687.4561 358.9199 686.1599 357.4082 683.064 C
363.6719 680.3999 366.4082 677.304 370.2241 668.52 C
370.2241 668.52 L
f
413.9277 443.8081 m
418.9678 447.3359 424.5122 451.1519 430.416 455.3281 C
424.9438 462.5278 426.2402 465.6958 426.2402 474.9839 C
425.2319 474.6958 424.728 474.4082 424.584 473.9038 C
420.9839 463.8242 417.4561 453.6719 413.9277 443.8081 C
413.9277 443.8081 L
f
229.1758 581.04 m
228.6001 576.5039 227.7358 572.1841 227.6641 567.936 C
227.52 564.624 228.312 563.1118 231.1919 562.248 c
232.7041 561.8159 234.2881 560.8081 235.8721 560.52 C
236.376 563.04 236.8799 566.1357 237.4561 568.4399 C
238.8242 574.7759 238.6802 575.208 233.208 578.7358 C
232.0562 579.5278 230.832 580.104 229.1758 581.04 C
229.1758 581.04 L
f
297.7202 585.5762 m
293.688 596.2319 290.2319 624.8882 290.5918 645.408 c
290.8081 659.0161 288.936 668.304 288 667.728 C
290.0879 650.8081 286.1279 597.3838 297.7202 585.5762 C
297.7202 585.5762 L
f
368.6401 700.272 m
370.584 703.0801 372.7441 706.176 374.04 710.6399 C
374.5439 713.52 372.7441 716.9041 371.9521 719.928 C
371.0879 723.168 369.7202 726.2639 368.9277 729.4321 C
368.4238 731.304 367.7041 731.9519 365.688 731.376 C
365.9038 729.072 365.9761 726.8398 366.4082 724.6799 C
367.2002 721.0081 368.1357 717.3359 369.0718 713.592 C
369.936 710.4241 367.6318 706.6799 364.9678 704.52 C
363.7441 703.2959 363.0962 701.5679 362.52 700.2 c
362.4482 699.9839 362.5918 700.7041 362.5918 700.488 c
362.2319 690.408 366.5518 697.3201 368.6401 700.272 c
368.6401 700.272 l
f
269.4961 556.1279 m
268.6318 549.792 266.9038 539.856 266.1118 533.8081 C
269.208 542.5918 271.0801 553.3921 272.1602 562.8242 C
272.52 565.8481 272.7358 568.8721 272.8081 571.9678 C
272.8081 575.2798 272.6641 578.52 272.52 581.832 C
270.144 581.9761 269.7119 570.0962 267.6958 554.6162 C
268.6318 555.4082 268.9922 555.6958 269.4961 556.1279 C
269.4961 556.1279 L
f
335.6641 690.48 m
333.3599 687.312 L
335.3042 662.76 L
336.4561 658.0801 L
335.6641 690.48 L
335.6641 690.48 L
f
233.208 639.2158 m
233.5679 637.7759 233.6401 634.5361 233.7842 630.5762 C
236.5918 629.7842 239.688 629.856 242.5679 629.4961 C
247.4639 628.9199 248.6162 636.48 243.3599 637.1279 C
239.6162 637.6318 236.8081 638.208 233.208 639.2158 C
233.208 639.2158 L
f
373.0322 725.9041 m
373.104 724.248 374.9761 717.9839 375.8398 713.592 c
376.272 711.5759 376.0562 710.064 375.9839 709.344 C
375.9839 706.5361 377.064 705.6719 379.8721 704.6641 C
379.9438 709.488 380.0879 714.0239 380.2319 718.488 C
380.2319 718.7759 378.5762 721.1519 378.2881 721.4399 C
376.4878 723.168 375.1919 723.4561 373.0322 725.9041 C
373.0322 725.9041 L
f
285.1919 733.752 m
285.48 733.6079 285.8398 733.3921 286.1279 733.248 C
288.4321 738.2161 289.8721 740.8799 292.5361 746.4961 C
284.5439 743.616 284.2559 742.104 280.2959 734.3281 C
282.312 735.0479 282.4561 733.824 283.3921 733.896 C
285.624 740.448 287.2798 742.104 289.5122 743.832 C
287.9277 740.0161 286.7759 737.6399 285.1919 733.752 C
285.1919 733.752 L
f
295.7041 580.5361 m
298.9438 570.168 303.6958 553.0322 307.0801 542.6641 C
307.2959 542.376 307.728 543.6719 307.7998 545.9038 C
305.4961 554.9038 303.3359 563.2559 300.8882 572.1841 C
300.4561 573.9121 296.1357 580.752 295.7041 580.5361 C
295.7041 580.5361 L
f
287.2798 513 m
287.4238 518.3281 288.2158 524.0161 287.064 529.272 c
286.272 533.1602 284.688 536.9761 285.4082 541.1519 C
285.7681 543.168 285.48 546.1201 283.752 547.2002 C
284.04 544.1758 284.7598 517.8242 287.2798 513 C
287.2798 513 L
f
266.5439 561.0962 m
261.5762 550.8721 261.5039 540.936 263.3042 530.9277 C
264.3838 540.7197 265.4639 550.584 266.5439 561.0962 C
266.5439 561.0962 L
f
307.728 564.3359 m
307.5122 564.2642 307.2959 564.1201 307.1519 564.0479 C
310.5361 555.1919 314.7119 536.3999 314.4238 526.248 C
316.6563 533.1602 310.104 559.8721 309.7441 561.5278 C
309.5278 562.6079 308.4482 563.3999 307.728 564.3359 C
307.728 564.3359 L
f
297.5762 596.0161 m
296.5679 607.104 295.4878 618.624 294.48 630.2158 C
293.4722 618.48 294.5518 606.96 297.5762 596.0161 C
297.5762 596.0161 L
f
292.8242 651.8879 m
292.8242 644.9038 292.8242 637.8481 292.8242 630.936 C
295.0562 632.8081 295.416 644.9761 292.8242 651.8879 C
292.8242 651.8879 L
f
275.3999 568.8721 m
275.2559 568.8721 275.1118 568.8721 274.896 568.8721 C
274.896 568.0078 274.8242 567.144 274.8242 566.2798 C
274.8242 559.7998 274.896 553.3198 275.04 546.7681 C
275.04 545.2559 275.6162 543.7441 275.9038 542.2319 C
276.2642 546.624 276.3359 550.8721 276.1919 555.1201 C
276.0479 559.728 275.688 564.2642 275.3999 568.8721 C
275.3999 568.8721 L
f
355.5361 619.0562 m
352.0078 618.6958 347.9761 618.7681 344.1602 617.9038 C
347.04 613.0078 353.8081 613.3682 355.896 614.1602 C
356.1841 615.96 356.5439 618.3359 355.5361 619.0562 C
355.5361 619.0562 L
f
299.7358 734.616 m
303.1919 738.5039 306.2158 741.6719 309.6001 745.5601 C
307.584 745.344 300.0962 740.8799 299.7358 734.616 C
299.7358 734.616 L
f
390.312 668.0879 m
390.7441 673.1279 391.3921 689.3999 398.376 694.0801 C
391.4639 695.0161 386.2798 675.072 390.312 668.0879 C
390.312 668.0879 L
f
289.5122 734.1841 m
292.104 738.5039 290.0879 733.752 297.5039 747.72 C
294.7681 748.0081 289.0078 738.4321 289.5122 734.1841 C
289.5122 734.1841 L
f
292.896 540.3599 m
292.896 532.0801 292.896 523.7998 292.896 515.52 C
294.5518 523.7998 294.6958 532.0078 292.896 540.3599 C
292.896 540.3599 L
f
311.9038 469.5122 m
311.1841 467.2798 307.0801 454.5361 306.7202 453.4561 C
310.752 457.1279 312.1201 463.0322 311.9038 469.5122 C
311.9038 469.5122 L
f
273.312 733.3921 m
277.7759 734.688 279.0718 742.4639 280.5122 743.5439 C
277.9199 743.3281 274.896 736.272 273.312 733.3921 C
273.312 733.3921 L
f
273.96 538.9199 m
273.6001 538.9199 272.6641 536.9761 272.2319 536.9038 C
272.52 531.4321 273.0239 526.752 273.312 521.208 C
273.4561 521.2798 273.6001 521.2798 273.6719 521.2798 C
273.6719 526.752 273.96 533.4482 273.96 538.9199 C
273.96 538.9199 L
f
271.5122 739.584 m
266.2559 736.9919 265.104 733.104 265.5361 730.584 C
267.624 733.4639 269.2798 735.9839 271.5122 739.584 C
271.5122 739.584 L
f
275.3281 651.4561 m
272.4482 646.1279 274.6079 641.0161 275.3281 635.9761 C
275.3281 641.0879 275.3281 646.272 275.3281 651.4561 C
275.3281 651.4561 L
f
279.5762 561.6719 m
279.2881 561.6001 278.9277 561.6001 278.6401 561.5278 C
279.0718 556.416 279.3599 550.8721 279.7202 545.7598 C
280.0078 545.7598 280.2959 546.3359 280.6563 546.2642 C
280.2959 551.376 279.936 556.4878 279.5762 561.6719 C
279.5762 561.6719 L
f
294.7681 738.6479 m
297.5039 741.4561 299.1602 742.896 300.4561 746.4961 C
296.064 744.408 294.8398 738.6479 294.7681 738.6479 C
294.7681 738.6479 L
f
305.208 540.2881 m
304.2002 545.2559 301.752 556.7041 299.52 561.6719 C
299.3042 561.6001 298.3682 561.7441 298.1519 561.6719 C
298.8721 562.104 302.9038 545.04 305.208 540.2881 C
305.208 540.2881 L
f
284.5439 745.5601 m
282.6001 746.4241 276.9839 736.5601 278.856 733.968 C
281.1602 738.5759 282.2402 740.9519 284.5439 745.5601 C
284.5439 745.5601 L
f
355.752 622.9438 m
353.376 624.8882 350.1357 624.7441 347.7598 622.2959 C
349.7041 622.5117 355.0322 621.5762 355.752 622.9438 C
355.752 622.9438 L
f
302.1118 743.4719 m
298.2959 743.76 296.2798 736.5601 296.3521 735.0479 C
298.0801 737.7839 300.2402 740.6641 302.1118 743.4719 C
302.1118 743.4719 L
f
309.96 547.272 m
310.3198 546.0479 305.6401 564.6958 304.8481 567.8643 C
304.6318 567.792 303.2642 570.4561 303.0479 570.0239 C
304.6318 563.1841 308.4482 550.7998 309.96 547.272 C
309.96 547.272 L
f
306.5762 738.144 m
311.4722 741.5278 313.7041 742.968 316.4399 744.9839 C
310.6802 745.272 307.2241 740.376 306.5762 738.144 C
306.5762 738.144 L
f
295.272 513.7197 m
298.6563 516.8159 296.1357 520.5601 296.5679 523.9438 C
296.1357 520.5601 295.7041 517.104 295.272 513.7197 C
295.272 513.7197 L
f
276.9839 743.2559 m
274.5361 742.968 270 733.3921 269.3521 732.168 C
271.8721 732.8879 276.0479 741.312 276.9839 743.2559 C
276.9839 743.2559 L
f
270.5039 524.376 m
271.3682 525.6001 270.8638 535.0322 271.2241 535.896 C
271.2959 535.896 269.6401 533.5918 270.2158 534.4561 C
270.2158 530.7842 270.5039 528.0479 270.5039 524.376 C
270.5039 524.376 L
f
294.4082 474.7681 m
293.832 475.9922 286.272 468 287.3521 464.7598 C
288.792 466.8481 292.9678 472.6802 294.4082 474.7681 C
294.4082 474.7681 L
f
289.728 537.8398 m
289.4399 537.7681 289.0801 537.7681 288.792 537.6958 C
289.728 535.0322 290.2319 530.856 290.3042 528.2642 C
291.3838 530.1357 290.0161 537.5518 289.728 537.8398 C
289.728 537.8398 L
f
253.4399 515.2319 m
254.0161 508.6079 254.2319 505.7998 258.6958 503.1357 C
255.8159 507.2402 256.752 511.2002 253.4399 515.2319 C
f
*U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_screens_AI5 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
